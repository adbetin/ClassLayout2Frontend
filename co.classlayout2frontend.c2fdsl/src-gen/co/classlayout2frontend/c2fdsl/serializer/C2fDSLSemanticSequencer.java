/*
 * generated by Xtext 2.12.0
 */
package co.classlayout2frontend.c2fdsl.serializer;

import co.classLayout2Frontend.Autocomplete;
import co.classLayout2Frontend.CheckList;
import co.classLayout2Frontend.ClassLayout2FrontendPackage;
import co.classLayout2Frontend.Composition;
import co.classLayout2Frontend.Dropdownlist;
import co.classLayout2Frontend.EntitiesModel;
import co.classLayout2Frontend.Entity;
import co.classLayout2Frontend.Enumeration;
import co.classLayout2Frontend.FileUpload;
import co.classLayout2Frontend.Image;
import co.classLayout2Frontend.InputForm;
import co.classLayout2Frontend.InputText;
import co.classLayout2Frontend.IterationContainer;
import co.classLayout2Frontend.IterationFilter;
import co.classLayout2Frontend.List;
import co.classLayout2Frontend.Literal;
import co.classLayout2Frontend.PageView;
import co.classLayout2Frontend.PrimitiveType;
import co.classLayout2Frontend.Project;
import co.classLayout2Frontend.Property;
import co.classLayout2Frontend.RadioButtonGroup;
import co.classLayout2Frontend.Reference;
import co.classLayout2Frontend.SiteView;
import co.classLayout2Frontend.StaticContainer;
import co.classLayout2Frontend.TextArea;
import co.classlayout2frontend.c2fdsl.services.C2fDSLGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class C2fDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private C2fDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ClassLayout2FrontendPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ClassLayout2FrontendPackage.AUTOCOMPLETE:
				sequence_Autocomplete(context, (Autocomplete) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.CHECK_LIST:
				sequence_CheckList(context, (CheckList) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.COMPOSITION:
				sequence_Composition(context, (Composition) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.DROPDOWNLIST:
				sequence_Dropdownlist(context, (Dropdownlist) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.ENTITIES_MODEL:
				sequence_EntitiesModel(context, (EntitiesModel) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.FILE_UPLOAD:
				sequence_FileUpload(context, (FileUpload) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.IMAGE:
				sequence_Image(context, (Image) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.INPUT_FORM:
				sequence_InputForm(context, (InputForm) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.INPUT_TEXT:
				sequence_InputText(context, (InputText) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.ITERATION_CONTAINER:
				sequence_IterationContainer(context, (IterationContainer) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.ITERATION_FILTER:
				sequence_IterationFilter(context, (IterationFilter) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.LIST:
				sequence_List(context, (List) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.LITERAL:
				sequence_Literal(context, (Literal) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.PAGE_VIEW:
				sequence_PageView(context, (PageView) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.PRIMITIVE_TYPE:
				sequence_PrimitiveType(context, (PrimitiveType) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.RADIO_BUTTON_GROUP:
				sequence_RadioButtonGroup(context, (RadioButtonGroup) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.SITE_VIEW:
				sequence_SiteView(context, (SiteView) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.STATIC_CONTAINER:
				sequence_StaticContainer(context, (StaticContainer) semanticObject); 
				return; 
			case ClassLayout2FrontendPackage.TEXT_AREA:
				sequence_TextArea(context, (TextArea) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ElementView returns Autocomplete
	 *     Input returns Autocomplete
	 *     Autocomplete returns Autocomplete
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         multiple=EBoolean 
	 *         displayName=EString? 
	 *         description=EString? 
	 *         label=EString? 
	 *         property=[StructuralFeature|EString]?
	 *     )
	 */
	protected void sequence_Autocomplete(ISerializationContext context, Autocomplete semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Input returns CheckList
	 *     CheckList returns CheckList
	 *
	 * Constraint:
	 *     (name=EString displayName=EString? description=EString? label=EString? property=[StructuralFeature|EString]?)
	 */
	protected void sequence_CheckList(ISerializationContext context, CheckList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructuralFeature returns Composition
	 *     Composition returns Composition
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         required=EBoolean? 
	 *         many=EBoolean? 
	 *         description=EString? 
	 *         displayName=EString? 
	 *         target=[Entity|EString]
	 *     )
	 */
	protected void sequence_Composition(ISerializationContext context, Composition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementView returns Dropdownlist
	 *     AtomicView returns Dropdownlist
	 *     Input returns Dropdownlist
	 *     Dropdownlist returns Dropdownlist
	 *
	 * Constraint:
	 *     (name=EString displayName=EString? description=EString? label=EString? property=[StructuralFeature|EString]?)
	 */
	protected void sequence_Dropdownlist(ISerializationContext context, Dropdownlist semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntitiesModel returns EntitiesModel
	 *
	 * Constraint:
	 *     (name=EString modelElements+=EntityModelElement modelElements+=EntityModelElement*)
	 */
	protected void sequence_EntitiesModel(ISerializationContext context, EntitiesModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityModelElement returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         displayName=EString? 
	 *         superclass=[Entity|EString]? 
	 *         structuralFeatures+=StructuralFeature 
	 *         structuralFeatures+=StructuralFeature*
	 *     )
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityModelElement returns Enumeration
	 *     PropertyType returns Enumeration
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     (name=EString description=EString? displayName=EString? literals+=Literal literals+=Literal*)
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FileUpload returns FileUpload
	 *
	 * Constraint:
	 *     (name=EString displayName=EString? description=EString? label=EString? property=[StructuralFeature|EString]?)
	 */
	protected void sequence_FileUpload(ISerializationContext context, FileUpload semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementView returns Image
	 *     Output returns Image
	 *     Image returns Image
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         displayName=EString? 
	 *         description=EString? 
	 *         width=EDouble? 
	 *         height=EDouble? 
	 *         property=[StructuralFeature|EString]?
	 *     )
	 */
	protected void sequence_Image(ISerializationContext context, Image semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContainerView returns InputForm
	 *     ElementView returns InputForm
	 *     InputForm returns InputForm
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         displayName=EString? 
	 *         description=EString? 
	 *         entity=[Entity|EString] 
	 *         elements+=ElementView 
	 *         elements+=ElementView*
	 *     )
	 */
	protected void sequence_InputForm(ISerializationContext context, InputForm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementView returns InputText
	 *     AtomicView returns InputText
	 *     Input returns InputText
	 *     InputText returns InputText
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         multiline=EBoolean? 
	 *         displayName=EString? 
	 *         description=EString? 
	 *         label=EString? 
	 *         property=[StructuralFeature|EString]?
	 *     )
	 */
	protected void sequence_InputText(ISerializationContext context, InputText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContainerView returns IterationContainer
	 *     ElementView returns IterationContainer
	 *     IterationContainer returns IterationContainer
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         displayName=EString? 
	 *         description=EString? 
	 *         entity=[Entity|EString]? 
	 *         (elements+=ElementView elements+=ElementView*)? 
	 *         (iterationFilters+=IterationFilter iterationFilters+=IterationFilter*)?
	 *     )
	 */
	protected void sequence_IterationContainer(ISerializationContext context, IterationContainer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IterationFilter returns IterationFilter
	 *
	 * Constraint:
	 *     input=[Input|EString]?
	 */
	protected void sequence_IterationFilter(ISerializationContext context, IterationFilter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementView returns List
	 *     AtomicView returns List
	 *     Input returns List
	 *     List returns List
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         multiple=EBoolean? 
	 *         displayName=EString? 
	 *         description=EString? 
	 *         label=EString? 
	 *         property=[StructuralFeature|EString]?
	 *     )
	 */
	protected void sequence_List(ISerializationContext context, List semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Literal returns Literal
	 *
	 * Constraint:
	 *     (name=EString value=EInt)
	 */
	protected void sequence_Literal(ISerializationContext context, Literal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ClassLayout2FrontendPackage.Literals.ENTITY_MODEL_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ClassLayout2FrontendPackage.Literals.ENTITY_MODEL_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ClassLayout2FrontendPackage.Literals.LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ClassLayout2FrontendPackage.Literals.LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLiteralAccess().getValueEIntParserRuleCall_6_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PageView returns PageView
	 *
	 * Constraint:
	 *     (name=EString layoutType=LayoutType elementViews+=[ElementView|EString] elementViews+=[ElementView|EString]*)
	 */
	protected void sequence_PageView(ISerializationContext context, PageView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityModelElement returns PrimitiveType
	 *     PropertyType returns PrimitiveType
	 *     PrimitiveType returns PrimitiveType
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_PrimitiveType(ISerializationContext context, PrimitiveType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ClassLayout2FrontendPackage.Literals.ENTITY_MODEL_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ClassLayout2FrontendPackage.Literals.ENTITY_MODEL_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimitiveTypeAccess().getNameEStringParserRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Project returns Project
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         entitiesmodel=EntitiesModel 
	 *         siteViews+=SiteView 
	 *         containerViews+=ContainerView 
	 *         containerViews+=ContainerView* 
	 *         pageViews+=PageView 
	 *         pageViews+=PageView*
	 *     )
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructuralFeature returns Property
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         displayName=EString? 
	 *         defaultValue=EString? 
	 *         required=EBoolean? 
	 *         type=[PropertyType|EString]
	 *     )
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementView returns RadioButtonGroup
	 *     AtomicView returns RadioButtonGroup
	 *     Input returns RadioButtonGroup
	 *     RadioButtonGroup returns RadioButtonGroup
	 *
	 * Constraint:
	 *     (name=EString displayName=EString? description=EString? label=EString? property=[StructuralFeature|EString])
	 */
	protected void sequence_RadioButtonGroup(ISerializationContext context, RadioButtonGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructuralFeature returns Reference
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         required=EBoolean? 
	 *         many=EBoolean? 
	 *         description=EString? 
	 *         displayName=EString? 
	 *         target=[Entity|EString]
	 *     )
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SiteView returns SiteView
	 *
	 * Constraint:
	 *     (name=EString templateColor=EString? displayName=EString)
	 */
	protected void sequence_SiteView(ISerializationContext context, SiteView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContainerView returns StaticContainer
	 *     ElementView returns StaticContainer
	 *     StaticContainer returns StaticContainer
	 *
	 * Constraint:
	 *     (name=EString displayName=EString? description=EString? entity=[Entity|EString]? (elements+=ElementView elements+=ElementView*)?)
	 */
	protected void sequence_StaticContainer(ISerializationContext context, StaticContainer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementView returns TextArea
	 *     Output returns TextArea
	 *     AtomicView returns TextArea
	 *     TextArea returns TextArea
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         isTitle=EBoolean 
	 *         displayName=EString? 
	 *         description=EString? 
	 *         value=EString? 
	 *         property=[StructuralFeature|EString]?
	 *     )
	 */
	protected void sequence_TextArea(ISerializationContext context, TextArea semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
