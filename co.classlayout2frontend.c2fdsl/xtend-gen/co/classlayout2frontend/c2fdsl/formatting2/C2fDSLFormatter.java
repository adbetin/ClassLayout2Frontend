/**
 * generated by Xtext 2.12.0
 */
package co.classlayout2frontend.c2fdsl.formatting2;

import co.classLayout2Frontend.ContainerView;
import co.classLayout2Frontend.EntitiesModel;
import co.classLayout2Frontend.EntityModelElement;
import co.classLayout2Frontend.PageView;
import co.classLayout2Frontend.Project;
import co.classLayout2Frontend.SiteView;
import co.classlayout2frontend.c2fdsl.services.C2fDSLGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class C2fDSLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private C2fDSLGrammarAccess _c2fDSLGrammarAccess;
  
  protected void _format(final Project project, @Extension final IFormattableDocument document) {
    document.<EntitiesModel>format(project.getEntitiesmodel());
    EList<SiteView> _siteViews = project.getSiteViews();
    for (final SiteView siteView : _siteViews) {
      document.<SiteView>format(siteView);
    }
    EList<PageView> _pageViews = project.getPageViews();
    for (final PageView pageView : _pageViews) {
      document.<PageView>format(pageView);
    }
    EList<ContainerView> _containerViews = project.getContainerViews();
    for (final ContainerView containerView : _containerViews) {
      document.<ContainerView>format(containerView);
    }
  }
  
  protected void _format(final EntitiesModel entitiesModel, @Extension final IFormattableDocument document) {
    EList<EntityModelElement> _modelElements = entitiesModel.getModelElements();
    for (final EntityModelElement entityModelElement : _modelElements) {
      document.<EntityModelElement>format(entityModelElement);
    }
  }
  
  public void format(final Object entitiesModel, final IFormattableDocument document) {
    if (entitiesModel instanceof XtextResource) {
      _format((XtextResource)entitiesModel, document);
      return;
    } else if (entitiesModel instanceof EntitiesModel) {
      _format((EntitiesModel)entitiesModel, document);
      return;
    } else if (entitiesModel instanceof Project) {
      _format((Project)entitiesModel, document);
      return;
    } else if (entitiesModel instanceof EObject) {
      _format((EObject)entitiesModel, document);
      return;
    } else if (entitiesModel == null) {
      _format((Void)null, document);
      return;
    } else if (entitiesModel != null) {
      _format(entitiesModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(entitiesModel, document).toString());
    }
  }
}
